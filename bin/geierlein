#! /usr/bin/env node
/**
 * vim: ft=javascript et ts=8 sts=4 sw=4
 * Node.js frontend logic for Geierlein HTML5
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var stdin = process.openStdin();
var tty = require('tty');
var geierlein = require('../chrome/content/lib/geierlein/geierlein');
var argv = require('optimist')
    .usage('Geierlein Elster-Client f端r die Kommandozeile.\nVerwendung: $0')
    .demand('f')
    .alias('d', 'dry-run').describe('d', 'Coala-XML erzeugen, nicht senden')
    .alias('e', 'encrypt-only')
        .describe('e', 'verschl端sseltes Coala-XML erzeugen, nichts weiter')
    .alias('f', 'file').describe('f', 'Lade aus Datei')
    .alias('s', 'sign').describe('s', 'Signiere mit Softwarezertifikat aus Datei')
    .alias('t', 'testcase').describe('t', 'Testfall erstellen')
    .argv;
var data = geierlein.util.parseFile(require('fs').readFileSync(argv.file, 'UTF-8'));
var ustva = new geierlein.UStVA();

for(var key in data) {
    if(data[key] === '') {
        /* Skip empty fields, especially the GUI version simply adds them
           all to explicitly state that the field was left empty. */
        continue;
    }
    if(key.substr(0, 2) === 'kz'
       || key === 'land') {
        /* Information belongs to the UStVA document and is numeric. */
        ustva[key] = +data[key].replace(',', '.');
    } else if(key === 'steuernummer'
       || key === 'jahr'
       || key === 'zeitraum') {
        /* Information belongs to the UStVA document and is a string. */
        ustva[key] = data[key];
    } else {
        ustva.datenlieferant[key] = data[key];
    }
}

if(ustva.kz83 === undefined) {
    ustva.kz83 = ustva.calculateKz83();
}

var validationResult = ustva.validate();
if(validationResult !== true) {
    console.log('Die eingelesenen Informationen sind nicht g端ltig.');
    console.log('Ung端ltige Felder: ', validationResult);
    process.exit(1);
}

var action;
if(argv['dry-run']) {
    action = function(signer, doneCb) {
        doneCb(ustva.toXml(argv.testcase, signer));
    };
} else if(argv['encrypt-only']) {
    action = function(signer, doneCb) {
        doneCb(ustva.toEncryptedXml(argv.testcase, signer));
    };
} else {
    action = function(signer, doneCb) {
        ustva.toEncryptedXml(argv.testcase, signer, geierlein.transfer, function(res) {
            res = geierlein.util.addStylesheetHref(res,
                __dirname + '/../chrome/content/xsl/ustva.xsl');
            doneCb(res);
        });
    };
}

function showResult(result) {
    console.log(result);
    process.exit(0);
}

if(argv.sign) {
    process.stderr.write('SoftPSE password: ');
    getPassword(function(password) {
        process.stderr.write('\n');

        /* create signer context */
        var signer = new geierlein.Signer();
        var pfx = require('fs').readFileSync(__dirname + '/../Testzertifikate/test-softpse_rsapss.pfx', 'binary');
        signer.setKeyFromPkcs12Der(pfx, password);

        /* run action */
        action(signer, showResult);
    });
} else {
    /* run action without signer context */
    action(undefined, showResult);
}


function getPassword(cb) {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    tty.setRawMode(true);
    var password = '';
    process.stdin.on('data', function(char) {
        char = char + '';

        switch(char) {
            case '\n':
            case '\r':
            case '\u0004':  /* C-d */
                tty.setRawMode(false);
                stdin.pause();
                cb(password);
                break;

            case '\u007f':  /* backspace */
                password = password.substr(0, password.length - 1);
                break;

            case '\u0003':  /* C-c */
                process.exit();
                break;

            default:
                password += char;
                break;
        }
    });
}
